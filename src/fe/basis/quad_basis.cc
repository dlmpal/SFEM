#include "basis.h"
#include "quadrature.h"

namespace sfem::fe::basis
{
    //=============================================================================
    int LinearQuadBasis::dim() const
    {
        return 2;
    }
    //=============================================================================
    int LinearQuadBasis::n_nodes() const
    {
        return 4;
    }
    //=============================================================================
    int LinearQuadBasis::n_qpts() const
    {
        return 4;
    }
    //=============================================================================
    Scalar LinearQuadBasis::qwt(int npt) const
    {
        return gauss_qwt_2[npt % 2] * gauss_qwt_2[npt / 2];
    }
    //=============================================================================
    void LinearQuadBasis::qpt(int npt, Scalar pt[]) const
    {
        pt[0] = gauss_qpt_2[npt % 2];
        pt[1] = gauss_qpt_2[npt / 2];
    }
    //=============================================================================
    void LinearQuadBasis::eval_shape(const Scalar pt[], Scalar N[]) const
    {
        N[0] = 0.25 * (1.0 - pt[0]) * (1.0 - pt[1]);
        N[1] = 0.25 * (1.0 + pt[0]) * (1.0 - pt[1]);
        N[2] = 0.25 * (1.0 + pt[0]) * (1.0 + pt[1]);
        N[3] = 0.25 * (1.0 - pt[0]) * (1.0 + pt[1]);
    }
    //=============================================================================
    void LinearQuadBasis::eval_shape_grad(const Scalar pt[], Scalar dNdxi[]) const
    {
        dNdxi[0 * 3 + 0] = -0.25 * (1.0 - pt[1]);
        dNdxi[0 * 3 + 1] = -0.25 * (1.0 - pt[0]);

        dNdxi[1 * 3 + 0] = 0.25 * (1.0 - pt[1]);
        dNdxi[1 * 3 + 1] = -0.25 * (1.0 + pt[0]);

        dNdxi[2 * 3 + 0] = 0.25 * (1.0 + pt[1]);
        dNdxi[2 * 3 + 1] = 0.25 * (1.0 + pt[0]);

        dNdxi[3 * 3 + 0] = -0.25 * (1.0 + pt[1]);
        dNdxi[3 * 3 + 1] = 0.25 * (1.0 - pt[0]);
    }
    //=============================================================================
    int QuadraticQuadBasis::dim() const
    {
        return 2;
    }
    //=============================================================================
    int QuadraticQuadBasis::n_nodes() const
    {
        return 9;
    }
    //=============================================================================
    int QuadraticQuadBasis::n_qpts() const
    {
        return 9;
    }
    //=============================================================================
    Scalar QuadraticQuadBasis::qwt(int npt) const
    {
        return gauss_qwt_3[npt % 3] * gauss_qwt_3[npt / 3];
    }
    //=============================================================================
    void QuadraticQuadBasis::qpt(int npt, Scalar pt[]) const
    {
        pt[0] = gauss_qpt_3[npt % 3];
        pt[1] = gauss_qpt_3[npt / 3];
    }
    //=============================================================================
    void QuadraticQuadBasis::eval_shape(const Scalar pt[], Scalar N[]) const
    {
        // Corner nodes
        N[0] = 0.25 * (1 - pt[0]) * (1 - pt[1]) * pt[0] * pt[1];
        N[1] = -0.25 * (1 + pt[0]) * (1 - pt[1]) * pt[0] * pt[1];
        N[2] = 0.25 * (1 + pt[0]) * (1 + pt[1]) * pt[0] * pt[1];
        N[3] = -0.25 * (1 - pt[0]) * (1 + pt[1]) * pt[0] * pt[1];

        // Mid-side nodes
        N[4] = -0.5 * (1 - pt[0] * pt[0]) * (1 - pt[1]) * pt[1];
        N[5] = 0.5 * (1 + pt[0]) * (1 - pt[1] * pt[1]) * pt[0];
        N[6] = 0.5 * (1 - pt[0] * pt[0]) * (1 + pt[1]) * pt[1];
        N[7] = -0.5 * (1 - pt[0]) * (1 - pt[1] * pt[1]) * pt[0];

        // Interior node
        N[8] = (1 - pt[0] * pt[0]) * (1 - pt[1] * pt[1]);
    }
    //=============================================================================
    void QuadraticQuadBasis::eval_shape_grad(const Scalar pt[], Scalar dNdxi[]) const
    {
        // Corner nodes
        dNdxi[0] = 0.25 * pt[1] * (pt[1] - 1) * (2 * pt[0] - 1);
        dNdxi[1] = 0.25 * pt[0] * (2 * pt[1] - 1) * (pt[0] - 1);

        dNdxi[3] = 0.25 * pt[1] * (pt[1] - 1) * (2 * pt[0] + 1);
        dNdxi[4] = 0.25 * pt[0] * (2 * pt[1] - 1) * (pt[0] + 1);

        dNdxi[6] = 0.25 * pt[1] * (pt[1] + 1) * (2 * pt[0] + 1);
        dNdxi[7] = 0.25 * pt[0] * (2 * pt[1] + 1) * (pt[0] + 1);

        dNdxi[9] = 0.25 * pt[1] * (pt[1] + 1) * (2 * pt[0] - 1);
        dNdxi[10] = 0.25 * pt[0] * (2 * pt[1] + 1) * (pt[0] - 1);

        // Mid-side nodes
        dNdxi[12] = 1.0 * pt[1] * pt[0] * (1 - pt[1]);
        dNdxi[13] = 0.5 * (1 - 2 * pt[1]) * (pt[0] * pt[0] - 1);

        dNdxi[15] = -0.5 * (pt[1] * pt[1] - 1) * (2 * pt[0] + 1);
        dNdxi[16] = -1.0 * pt[1] * pt[0] * (pt[0] + 1);

        dNdxi[18] = -1.0 * pt[1] * pt[0] * (pt[1] + 1);
        dNdxi[19] = -0.5 * (2 * pt[1] + 1) * (pt[0] * pt[0] - 1);

        dNdxi[21] = 0.5 * (1 - 2 * pt[0]) * (pt[1] * pt[1] - 1);
        dNdxi[22] = 1.0 * pt[1] * pt[0] * (1 - pt[0]);

        // Interior node
        dNdxi[24] = 2 * pt[0] * (pt[1] * pt[1] - 1);
        dNdxi[25] = 2 * pt[1] * (pt[0] * pt[0] - 1);
    }
    //=============================================================================
    int CubicQuadBasis::dim() const
    {
        return 2;
    }
    //=============================================================================
    int CubicQuadBasis::n_nodes() const
    {
        return 16;
    }
    //=============================================================================
    int CubicQuadBasis::n_qpts() const
    {
        return 16;
    }
    //=============================================================================
    Scalar CubicQuadBasis::qwt(int npt) const
    {
        return gauss_qwt_4[npt % 4] * gauss_qwt_4[npt / 4];
    }
    //=============================================================================
    void CubicQuadBasis::qpt(int npt, Scalar pt[]) const
    {
        pt[0] = gauss_qpt_4[npt % 4];
        pt[1] = gauss_qpt_4[npt / 4];
    }
    //=============================================================================
    void CubicQuadBasis::eval_shape(const Scalar pt[], Scalar N[]) const
    {
        // Corner nodes
        N[0] = (0.111111111111111 - pt[1] * pt[1]) * (0.111111111111111 - pt[0] * pt[0]) * (0.31640625 - 0.31640625 * pt[0]) * (1 - pt[1]);
        N[1] = (0.111111111111111 - pt[1] * pt[1]) * (0.111111111111111 - pt[0] * pt[0]) * (1 - pt[1]) * (0.31640625 * pt[0] + 0.31640625);
        N[2] = (0.111111111111111 - pt[1] * pt[1]) * (0.111111111111111 - pt[0] * pt[0]) * (pt[1] + 1) * (0.31640625 * pt[0] + 0.31640625);
        N[3] = (0.111111111111111 - pt[1] * pt[1]) * (0.111111111111111 - pt[0] * pt[0]) * (0.31640625 - 0.31640625 * pt[0]) * (pt[1] + 1);

        // Mid-side nodes
        N[4] = (0.333333333333333 - 1.0 * pt[0]) * (0.94921875 - 0.94921875 * pt[0] * pt[0]) * (1 - pt[1]) * (pt[1] * pt[1] - 0.111111111111111);
        N[5] = (0.94921875 - 0.94921875 * pt[0] * pt[0]) * (1 - pt[1]) * (pt[1] * pt[1] - 0.111111111111111) * (1.0 * pt[0] + 0.333333333333333);
        N[6] = (0.333333333333333 - 1.0 * pt[1]) * (0.94921875 - 0.94921875 * pt[1] * pt[1]) * (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111);
        N[7] = (0.94921875 - 0.94921875 * pt[1] * pt[1]) * (1.0 * pt[1] + 0.333333333333333) * (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111);
        N[8] = (0.94921875 - 0.94921875 * pt[0] * pt[0]) * (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111) * (1.0 * pt[0] + 0.333333333333333);
        N[9] = (0.333333333333333 - 1.0 * pt[0]) * (0.94921875 - 0.94921875 * pt[0] * pt[0]) * (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111);
        N[10] = (0.94921875 - 0.94921875 * pt[1] * pt[1]) * (1 - pt[0]) * (1.0 * pt[1] + 0.333333333333333) * (pt[0] * pt[0] - 0.111111111111111);
        N[11] = (0.333333333333333 - 1.0 * pt[1]) * (0.94921875 - 0.94921875 * pt[1] * pt[1]) * (1 - pt[0]) * (pt[0] * pt[0] - 0.111111111111111);

        // Interior nodes
        N[12] = (0.333333333333333 - 1.0 * pt[1]) * (0.333333333333333 - 1.0 * pt[0]) * (1 - pt[1] * pt[1]) * (2.84765625 - 2.84765625 * pt[0] * pt[0]);
        N[13] = (0.333333333333333 - 1.0 * pt[1]) * (1 - pt[1] * pt[1]) * (2.84765625 - 2.84765625 * pt[0] * pt[0]) * (1.0 * pt[0] + 0.333333333333333);
        N[14] = (1 - pt[1] * pt[1]) * (2.84765625 - 2.84765625 * pt[0] * pt[0]) * (1.0 * pt[1] + 0.333333333333333) * (1.0 * pt[0] + 0.333333333333333);
        N[15] = (0.333333333333333 - 1.0 * pt[0]) * (1 - pt[1] * pt[1]) * (2.84765625 - 2.84765625 * pt[0] * pt[0]) * (1.0 * pt[1] + 0.333333333333333);
    }
    //=============================================================================
    void CubicQuadBasis::eval_shape_grad(const Scalar pt[], Scalar dNdxi[]) const
    {
        // Corner nodes
        dNdxi[0] = (pt[1] - 1) * (pt[1] * pt[1] - 0.111111111111111) * (0.31640625 * pt[0] * pt[0] + 0.6328125 * pt[0] * (pt[0] - 1) - 0.03515625);
        dNdxi[1] = (pt[0] - 1) * (pt[0] * pt[0] - 0.111111111111111) * (0.31640625 * pt[1] * pt[1] + 0.6328125 * pt[1] * (pt[1] - 1) - 0.03515625);

        dNdxi[3] = (pt[1] - 1) * (pt[1] * pt[1] - 0.111111111111111) * (-0.31640625 * pt[0] * pt[0] - 0.6328125 * pt[0] * (pt[0] + 1) + 0.03515625);
        dNdxi[4] = (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111) * (-0.31640625 * pt[1] * pt[1] - 0.6328125 * pt[1] * (pt[1] - 1) + 0.03515625);

        dNdxi[6] = (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111) * (0.31640625 * pt[0] * pt[0] + 0.6328125 * pt[0] * (pt[0] + 1) - 0.03515625);
        dNdxi[7] = (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111) * (0.31640625 * pt[1] * pt[1] + 0.6328125 * pt[1] * (pt[1] + 1) - 0.03515625);

        dNdxi[9] = (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111) * (-0.31640625 * pt[0] * pt[0] - 0.6328125 * pt[0] * (pt[0] - 1) + 0.03515625);
        dNdxi[10] = (pt[0] - 1) * (pt[0] * pt[0] - 0.111111111111111) * (-0.31640625 * pt[1] * pt[1] - 0.6328125 * pt[1] * (pt[1] + 1) + 0.03515625);

        // Mid-side nodes
        dNdxi[12] = (pt[1] - 1) * (pt[1] * pt[1] - 0.111111111111111) * (-0.94921875 * pt[0] * pt[0] - 1.8984375 * pt[0] * (1.0 * pt[0] - 0.333333333333333) + 0.94921875);
        dNdxi[13] = (1.0 * pt[0] - 0.333333333333333) * (pt[0] * pt[0] - 1) * (-0.94921875 * pt[1] * pt[1] - 1.8984375 * pt[1] * (pt[1] - 1) + 0.10546875);

        dNdxi[15] = (pt[1] - 1) * (pt[1] * pt[1] - 0.111111111111111) * (0.94921875 * pt[0] * pt[0] + 1.8984375 * pt[0] * (1.0 * pt[0] + 0.333333333333333) - 0.94921875);
        dNdxi[16] = (1.0 * pt[0] + 0.333333333333333) * (pt[0] * pt[0] - 1) * (0.94921875 * pt[1] * pt[1] + 1.8984375 * pt[1] * (pt[1] - 1) - 0.10546875);

        dNdxi[18] = (1.0 * pt[1] - 0.333333333333333) * (pt[1] * pt[1] - 1) * (0.94921875 * pt[0] * pt[0] + 1.8984375 * pt[0] * (pt[0] + 1) - 0.10546875);
        dNdxi[19] = (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111) * (0.94921875 * pt[1] * pt[1] + 1.8984375 * pt[1] * (1.0 * pt[1] - 0.333333333333333) - 0.94921875);

        dNdxi[21] = (1.0 * pt[1] + 0.333333333333333) * (pt[1] * pt[1] - 1) * (-0.94921875 * pt[0] * pt[0] - 1.8984375 * pt[0] * (pt[0] + 1) + 0.10546875);
        dNdxi[22] = (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111) * (-0.94921875 * pt[1] * pt[1] - 1.8984375 * pt[1] * (1.0 * pt[1] + 0.333333333333333) + 0.94921875);

        dNdxi[24] = (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111) * (-0.94921875 * pt[0] * pt[0] - 1.8984375 * pt[0] * (1.0 * pt[0] + 0.333333333333333) + 0.94921875);
        dNdxi[25] = (1.0 * pt[0] + 0.333333333333333) * (pt[0] * pt[0] - 1) * (-0.94921875 * pt[1] * pt[1] - 1.8984375 * pt[1] * (pt[1] + 1) + 0.10546875);

        dNdxi[27] = (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111) * (0.94921875 * pt[0] * pt[0] + 1.8984375 * pt[0] * (1.0 * pt[0] - 0.333333333333333) - 0.94921875);
        dNdxi[28] = (1.0 * pt[0] - 0.333333333333333) * (pt[0] * pt[0] - 1) * (0.94921875 * pt[1] * pt[1] + 1.8984375 * pt[1] * (pt[1] + 1) - 0.10546875);

        dNdxi[30] = (1.0 * pt[1] + 0.333333333333333) * (pt[1] * pt[1] - 1) * (0.94921875 * pt[0] * pt[0] + 1.8984375 * pt[0] * (pt[0] - 1) - 0.10546875);
        dNdxi[31] = (pt[0] - 1) * (pt[0] * pt[0] - 0.111111111111111) * (0.94921875 * pt[1] * pt[1] + 1.8984375 * pt[1] * (1.0 * pt[1] + 0.333333333333333) - 0.94921875);

        dNdxi[33] = (1.0 * pt[1] - 0.333333333333333) * (pt[1] * pt[1] - 1) * (-0.94921875 * pt[0] * pt[0] - 1.8984375 * pt[0] * (pt[0] - 1) + 0.10546875);
        dNdxi[34] = (pt[0] - 1) * (pt[0] * pt[0] - 0.111111111111111) * (-0.94921875 * pt[1] * pt[1] - 1.8984375 * pt[1] * (1.0 * pt[1] - 0.333333333333333) + 0.94921875);

        // Interior nodes
        dNdxi[36] = (1.0 * pt[1] - 0.333333333333333) * (pt[1] * pt[1] - 1) * (2.84765625 * pt[0] * pt[0] + 5.6953125 * pt[0] * (1.0 * pt[0] - 0.333333333333333) - 2.84765625);
        dNdxi[37] = (1.0 * pt[0] - 0.333333333333333) * (pt[0] * pt[0] - 1) * (2.84765625 * pt[1] * pt[1] + 5.6953125 * pt[1] * (1.0 * pt[1] - 0.333333333333333) - 2.84765625);

        dNdxi[39] = (1.0 * pt[1] - 0.333333333333333) * (pt[1] * pt[1] - 1) * (-2.84765625 * pt[0] * pt[0] - 5.6953125 * pt[0] * (1.0 * pt[0] + 0.333333333333333) + 2.84765625);
        dNdxi[40] = (1.0 * pt[0] + 0.333333333333333) * (pt[0] * pt[0] - 1) * (-2.84765625 * pt[1] * pt[1] - 5.6953125 * pt[1] * (1.0 * pt[1] - 0.333333333333333) + 2.84765625);

        dNdxi[42] = (1.0 * pt[1] + 0.333333333333333) * (pt[1] * pt[1] - 1) * (2.84765625 * pt[0] * pt[0] + 5.6953125 * pt[0] * (1.0 * pt[0] + 0.333333333333333) - 2.84765625);
        dNdxi[43] = (1.0 * pt[0] + 0.333333333333333) * (pt[0] * pt[0] - 1) * (2.84765625 * pt[1] * pt[1] + 5.6953125 * pt[1] * (1.0 * pt[1] + 0.333333333333333) - 2.84765625);

        dNdxi[45] = (1.0 * pt[1] + 0.333333333333333) * (pt[1] * pt[1] - 1) * (-2.84765625 * pt[0] * pt[0] - 5.6953125 * pt[0] * (1.0 * pt[0] - 0.333333333333333) + 2.84765625);
        dNdxi[46] = (1.0 * pt[0] - 0.333333333333333) * (pt[0] * pt[0] - 1) * (-2.84765625 * pt[1] * pt[1] - 5.6953125 * pt[1] * (1.0 * pt[1] + 0.333333333333333) + 2.84765625);
    }
}